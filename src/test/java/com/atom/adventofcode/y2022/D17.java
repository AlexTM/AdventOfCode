package com.atom.adventofcode.y2022;

import org.junit.jupiter.api.Test;

import java.util.*;
import java.util.function.Function;

import static org.junit.jupiter.api.Assertions.*;

public class D17 {

    private final static String puzzleInput = ">><<<>>>><<<><>>><><<<<>>>><>>>><<<<>><<<<>>>><<<<>>>><<<>>>><<<>><<<<>>><<<<><><<>>><>>>><<<>>><<><<<><<<>>><<>>><<<><<><<>><<>><<<>>>><<<<><<>>>><>><<<>><<>>><<<>>>><<<<>>><<>>><><<<>>><<>>>><>>><<<<>>>><<>><<<<><<<<>><<<<>>><<>>><<<<><>>>><<<><<<<>><>>><<<<><<>>><>><<><><<>>><<<>>><<<<><<>>><><<<>><><<<<>><><<<>><<<>><>><>><<><<<<>>>><<<<>>><><<<><<>>>><<><<>><<>><><<<>>><>><<<>><<<><<><><<>>><<>>>><<<<>>>><<><<>><<<><<>><<<<><>>><>><<>>>><<<<>>><<<>>><<<>>><>>><>>><<<<>>><<<<><<<<>>>><>><<><<>><<<><><>>>><>>>><<<><<<><<<><<>><<<>>><<<>>><<<>>>><<>>><<<>><<<>>><<<<><<<><<>><<<><<>>><<<<>><<<><<<>><<<>><<>>>><<>><>><<<><<<<>>>><><<>><<>>><<><<>>><<>>>><<>>><<><<<<>>><<<>>><><<<>><<><<<><>>>><<>>><<<<>>>><<>>><<<<><<<<>>><<<<>><<><<<<><<><<<><<<<><><<>>>><<>>>><>>><<>>>><<<<>><><<<>>>><<>>><<<>>>><<>><<>><<<<>>><<<>><<>><<<<>>><>>>><<<>>>><<<>><<<<>><<>>><<<>>><<>><<<><<<>>>><<>>><>><<>>>><<>>><>><>><<<<>><<<<>>>><<>><<<>><<<>>><<<>><<>>><<>>>><<>><<>><<><<<<><<<>>>><>><>><<<<>><>><<>>>><<<>><>>><<>><>><>>>><<<<>>><<<>>><>><<<<>>><<<<>>><><<<><<<><<<>>>><<<<><>>>><<><<<>>>><<>>>><>><>>><<<>>>><<<>>>><>>><<<<>>><<<><>>><>>>><<<>><><<<<>>><<<<>><<<><<<<><<<>>><<<<>>><<<<>><<<><>>><<<><<>><<<<>><<<<>>><<>>><<<>>><<<<>>><>><<<>>>><<<<>><<<>><>>><<<>>>><>>>><<><<<>>>><>>>><<<<>>><<<<><<<><<<>>>><<<>><<<<>>>><<<<>>>><<<<><<<>><>>><><<<<>><<<<>>>><<>><<>><<>><<<>>>><<>><<<<><<<<>><>><<<<>>><<<>>><<<>>><<<<><<>><<<<><<>>><<<>>><<<>><><>><<>><<<<>>><<<<>>>><<<>><>>>><<<<><>>>><>>><<<<>><<>>>><<<<>>><<<>>>><>>><<<><<><<<>><>>>><<<>><<<<>>><>>><<<>><>><<<>>>><<<<>>>><<>><<<>>><<<<>>><<<<><>><<<>><<<>><<<>>><>>><<<>><<<<>>><<<<>>><<<<>>><<<<>><<<<>><<<<>>><<<<>>>><<<>><<<>>><<>>>><<>><<<>>>><<<>><<>>>><<<>><<<<>>><<<<><<>>><>><>>>><<>>>><<<<><<<><<><<<><<<<>><><<<><<<>><<<><<>><<<<>>><<<>><<>>>><><<<><><>><>><<<<>><<><>><<<>>><<<>>>><<<><<<>><<>><<>>>><<<<><<>><>><<<>>>><<><<<>>><>>>><<<<>>>><<>>><<>>><<<>>>><<<>>>><<>><<<>>>><<<<>><<<>><<<<>><>><<>><<<>><<<>><<>>>><<<>><<<>><<<<>><<<<>><<<<>>><<<><<<><<<<>>>><<><<<<><<>><>>><<<<>>><<<<><<<<><<<>>><<<><<<>>>><>>><<>>>><>><><<><<<<>>><<<>>><>><<><<<>><<<<>>>><<>>><<<<>><<<><<<>>><<>>><>>>><<>>><<<<>><><<>><<><<>>>><<><<<<>>><<<>>>><>>><<>>><<>>><<>><<<><<<<>><>>>><>>><<<><<<<>>>><<<<>>><>>>><<<<>>><<<><>><><<<<>>><<>>>><<>>><<<>><<>>>><<<>>>><<>>><<>>>><>>><<<<>>>><<<<>>><><<<<>>>><><<<<>><<>>>><<><<>>>><<<><><>>>><><<<<>><<<<>>><<>><>><<<><<<<>>>><<<>>><<<<><<>>>><<<>>>><<<<>>><<<><<<>><<<>>>><<<<>><>>>><<<>><<<>><>>>><<>>>><><<<>>><<<>>>><><<>>><<<><<<><>>>><<>>><<<>>>><><>><><>>>><><<<<><<>><<<>>><>>><<<<>>>><<<<>>>><<<<>>><<><><<>>><<<<>><>>>><<>>><<<>>><<<<>>><<<<>><>><<<<>>>><<>><<>><<<<>><<<<>>>><>>><<<>>>><<<>><<<<>>>><>>>><<>><>>>><>>><<>>>><<<>>>><<<<>><<<<>>>><<<><<<<>>><>>><<<<>><<<<>><>>><>><<<<><<<>><<<><<>><>>>><<<<>><><<<><>>><<<><<>><<<<>>>><<><<<>>><<>><<<><<><<<<>>><<<<><<<><<<>>><>><<<><<<>>>><>>>><<<>>>><<<<>>>><<<>>><><<>>>><<>>>><><<>>><>>>><<<>>><>>>><<<><<<<>><<<>>><<><<><>>>><<<>>><><<<>>><>><>>><<<<>>><<><<<<>>><<<<>>><<>><<>>><<<><<<<>>><<><<<>>>><<<<>>><<<>><>>><<<>><<<>>><>>>><<>><<<<><<>>>><<>>>><<<><<>>>><><>><>>><>><<>><<<<><<><<>>>><>><<<>>><>>><>>>><<<>>>><<<>><<<>><<>><><<<<><<<<>>>><<>>>><<>><<<>><<>><<<<><<<>><>>>><<>>><<<<>><>>><<<<>><<<<>>><<<<><<<>><<<>>>><<<>>><<<>>>><<<<><<<<>>>><<>><<>>><<<><<<>>>><<>>><>><<>>>><<<>>>><<>>>><>>><>>><<>><<<<><<<<>><<<<>>><<<<>><>><<<>><>>>><><<<<>>>><>><<<>>>><<<><<>>><<><><<<>>><>><<><>>><<<<><<>><<<>><<<>>><<>>><<<>>><<<><<>><>>>><>><<<<>><><>>><>>>><>>><<<>>><<>><<<><>>><>>><<>>>><<<><<<<>>><<<<><<>><<<>>>><<<>>><<<><>>>><><<><<<<>>><<<<>><<<<>><<>>><<>>>><>>>><<<><<<><>>>><>><<>>><<>>>><<<<><>><><<<><<<>>><<<<>><<<><<<><>>><<<>>><>>><<<<>>><><>>>><<<<><<<<>>><<>>><<>>>><<<<>>>><>>><><<>>>><><<<>>><<<>>>><>><<>>><<<>>>><>>>><<<<>>>><>><<<>>>><>><>>>><<><>>><<>>><>>>><<<>>>><<<<><<<<>>><<<<>>>><><>><<><<><<<<>>>><<><<>><<>><<<>><<<<>>>><><><<>><>>>><>>><<>>><<>><<<<>><<>><<<<>>>><>>>><<>>>><<<>>>><<<<>>>><<>>><><<<<>>><<>><>>><<>>>><<<<>>><<<<>>><<>>><<><<<<>>><>>>><<<>>>><<<<><>>>><<<<>><<<<>>>><<>><<<>><<<<>>><<<<>><<<>><>>><<<>>>><>>>><<<><<<>>>><<<>>><<<<><<>>><<<>>><<>><><<<<>>>><<><<<>>><<<>>><<<>>><<<<>><<<<>><<<<>>>><<<><>><<><<<<>>>><<<<>><<<>>>><><<<>>><<<><>>>><<>>>><<<<>>>><<<<>>><<>><<<>>><<><<>>><<<>>>><<<<><<<<>>>><<<>>>><<<>>>><<><<<>>><<<>>><>><<>>><<<><<<>>>><<<>>>><<>>>><<<<>>>><<>>><>>><<<<>>><<<<><<<>>><<<><<<<>>>><><<>>><>>>><<>>>><<<>>><>><<<>>><<<>>><<>>>><<<<><<>><<>>>><<<<>><<>>>><>><<<<>>>><<><<<><>>>><<<<><<<>><<>>>><>><<>><<<<>>>><<<<>><<>>>><<>>><><<<<>><><<<<><<<<>>>><><>><<<<>><<<>>><>><<<><<<>><<<<>>>><>>><<<<>>><<<<><<>>><<<<>>><<<<><<<<>>>><>>>><<<>>>><>>><<>>>><<<<>><<><<<>>><<<>>>><<><<<<>>><>><<>>>><<<<>><><>><<><>><>>><<><<<>><<<<><>>><<<<>>><>>><>>>><>>><<>>>><<<<>>>><<<<>><>><<<<><<<<><<<<>><<<>>>><<<><<<>><>>><>>><<>>><<<<><<><<>>><<<>><<<>>><><<>>>><<<<>>><<<>>>><<>><<<>>>><<<<>>><<<<>>><>>><<<>>><<>><<<>>>><>>>><<>>><>><>><<>><<>>><<<<>>>><><><<>>>><<<>>>><<><<<>>>><>><>>><>>><<>><>>>><>><<>>><<<<>>><<<>>><<<>>>><<><<<>><><<>><>>>><<>>>><<<<>>>><>><><<<<>><<>>>><>><><>>><<<>>><>>>><>><<<<>><>><>><<<>>><><<>><>><<>><<<<>>>><><<>>><<<>>>><><<<><<<<>>>><>>><<>>><<<><<<<>><<<>>>><<<>>><<<>><>><<<<><<<<><<<>>>><<<>>><<><<<>>><<<<>>>><<<>>><><<<>><<<><<>>>><><>>><<<><<<>><<>>>><<<>><<<<><<><<<<>>><<>>><<<<>>>><<<>>>><<<<>>><<<<>><>><<>>><<><<<>>>><<<>><<<<><<>>>><<<<>><<<<>><<>>>><><<<<>><<<<>>><<<<>>>><<>>>><>>>><<>><<>>><<<>><<><<<>>>><<>>>><<<>><<<><<>><<><<<>><<<<><<>>>><>>><<>>>><<<><<>>>><<<>>>><<<>><<<<>>>><<<<>><<<<>><>>><>>>><<>>>><<><<>>><<<<><<>>>><>><<>><>>>><<<<>>><<<<>><<<<>>>><<<<><<<<><<><<><><<>>>><>><>>><<<<>><<>>><>>>><><<<><<>><<<>>>><<<<>><<<<><<>><<<><<>><<<>>><>><<<>><<>>>><<>><><><<<>>>><<<><<<>>>><>><<<>>><<<>>>><<>>>><<<<>>>><>><<<>><<<>>>><<<<>>>><>><<<<><<<>>><<<<>>><<>>><>>>><><>>>><<>>><<<>>>><>><<<<>>>><<>>><<><<><<<<>>>><<<><<<<>>>><<>>>><<<><<>>>><<<<>>>><<<<>>>><<<>>><<<<>>><<<><<<><<<>><<>><>>><<><<><<<<>><<<<>>>><<<<><<>>>><<<>><<<>>><<<>>><<<<><<<<>>><<<<>><<<>><>>><<>>><<<<>>><><<><<<>>><>><>>><<<>>>><<<>>><<<<>>>><<<>>><<<><<<><<<>>>><>>>><<<<>>><<>>><<>>>><<<><<<>>><<<>>>><<<<><<<<>>><<>><>>>><<<<><>><>><<>>><<><<<>>>><<<<>><<<<>><<>>>><<<<>>><<<<><>><<<>>>><<<<>>>><<<>>><<>>><<>>><><>>><><<<<><<<<>><<><><<><<<<>><<<>>>><<>>><<<<>><<<>>><<<<>>>><<<<>>>><<<>><<<><<>>><>>><<<<>><<>>><>><<<<>>><<<<>>>><<>><>>>><<<<>>><>><>><<<>>>><<<>>><<<>><<<<>>>><<<>>><<<>>>><<>><>>><<<<>>><<>><<<><<<>><<<>><<<>><<<<>><<<><<>>><><<<>>>><<<<>>><>>><<>>>><<<><<>>><>>>><><<>><<>><<<<>><<<<>>><<<>>>><>>>><<<><><<<<>><<>>>><<<<>>>><<<>>><<<<>>>><<<>>><<>>><<>>>><<>>><>>>><<<>><<<><>><<<><<><>>><>>>><<<>>><<>>>><<>><>><>>>><<<<>><<>>>><<><<>>><>><<<<><<><<<>>>><<<<>>><>>>><<<>>><<<<><<<>>>><<>>>><<<<>>>><<><<<<><><<>>><<<<>><>><<<>><<><>><<>>>><<<<><<<><<<>>><<<><<>>><<>>>><><<>>>><<>><>>>><<<<>>>><>><<><<<<>>>><<<<>>><<<>><<<>>><<>>><<<<><>>><<><>><<<<><>>>><<<>>><<<<><<><>><<<>>>><<><><><<>><<>>>><<<<>>><<<>>>><<<>><>>>><>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><>>>><<>>>><<<>>><<<<>><<<>><<><<>><>>>><<<><<<>>>><<<>>><<<>>>><<<>>>><<<>>>><<<<>><<<<>>><<<>>>><<><<<<><<<<>>>><<<<>><<<<>>>><<<>>><<<<>><<<<>>>><><<<<><<<<><>><<<>><<<><<>><<><<<>><<>><<>>>><<>>><>>><<<<>>><<<<>><<<<>>>><<<>>>><>><>>>><>>>><<>>><<<>><<>>><<<<><<<<>>><<<>>>><<><<>><<<<>><<<><<<>>><><<<<>><<<<>><<<>>>><>>>><<>>><<<<>>><<<<>>><<>>>><<<>>><<<<>>>><<<<>>><<<><><<<>>>><<<>><>>>><<<<>><<><<><<<><<<><>><<>>>><<<><<<<>><>>>><<>>>><>>><<<<>>><<<<>><<>>><<<>>><<<<>><<<<>>>><<<><>>><<<<>><>><<<><<<>>>><>>><<<<>>><<<>><>><>><<<>>>><<>>>><<<><<>>><<<<>>>><<>>><<<>><<<<>>><<>>><<<<><<<<>>>><<>>>><<<<>>>><<<<>>>><<><<<>><<<<>><<<>><<<>><<<<>>><>>><<<><>>>><<<<>>>><<>>>><<<>><<<<><><<<<>>><<<<>>>><<>>><<>>><<<>><<<<>>>><<<<>>>><>><>><<<<>>>><<<>>>><<><<<><<>><<<<>><<<>><<<<>><>>>><<<<>>>><<<<>>>><<<>>>><<<<>>><<>>>><<>>>><><<<>><<<>>><<<><<>>><><<<><>>>><<<<>>><>><>><<>>>><<<<>>>><<<<>>><>><<<<><<>>><>>>><<>><<>>>><<>>><<<<>>><<<>>><>><<<>><<<>>>><<<>><<<>><<>>><>><<<<>>><<<<>><<<><<<>><<<<>>>><<><<<>>><<<<>>><<><<><>>>><<<>>><<<>>>><<<>><<<>><<<<>><<<<>>><<<<>>>><<<>>><<<>><<<<>><<<>>>><><<><<><>><<<>>><<>>><<<<>>>><<<<>>><<<><<>><<<><<<<>><<<<>>><<<<><>>><<<>><<><><<<>>>><<<<><<<>>><<<>>>><<<<>>>><<<>><<<<>>>><<<><<<<>><<>>>><<<>><<>>>><<><<<>>>><><>><<<<>>><><<<>>>><<<><<><<>>><<<<>>><<<>><>><<<><<<>><<<<><<<<>><<<<><<<<>><><><<<><>>><>>><>>>><<<<>>>><<<>>><><>>>><<<<>>><<<>>><<<<>><<<>><<<><<><<><<>>>><><<<>><<><>>><<<<>>><<<<>>><<><<<<>><<<<><<<><<<>>>><<<>><<<>><<<<>><<<<><<<>>>><<<<><<<<>><<<<><<<<>>><<<<>>><>>><<<<>><<>>>><<<>>>><<<<>>><<>><<<<>><>>><>>>><<><<>>>><<>><>>>><>>><>><<>>>><<<<>>>><<<<><<<<><<<>>><<<>><<<<>>><><<<<>><<<<>><><<<<>>><<<<><<><<><<>><<<><>>>><<<<>><>><<>>>><<<>>>><>><>><<>>>><>><><<<>><><>>><<>>><<>><>>><>>>><<<<>><<>>><<>>><>><<<>>>><<<>><<<>>>><<<<>><<<<>>><<<>>>><<<<>>><>>><><<<<>>><>><<<>><<<<><<><<<>><<>>><<><<<<>>><<<>>><<<><>><><<<<>>>><<<><<><>><<>>>><<<>>><<<>>><<<><>><><<>>><<><<>>><><<>>>><>>><<<<>>><<>>><<<<><>><<<><><<<<><<>>><<>>>><<<>>><<<>><<>>>><<<><<<>><<>>>><<>>><<<<>>><<<>>>><<>>>><<<<><<>><<>><<><>>><<><<<<>><<>><<<>><<<<><><<<<>>><>><<<<>>>><<<>>>><<<<>><>>>><>>>><<<<><<>>><<<<>><<<<>><<<>><<<>><><<<<><<><<<><>>>><<<<>>>><>><><>><<<<><<>>>><<><>><<>>><<<<>>>><<<<>>>><>>>><<>>><<<>>>><<>>><<<>>>><<<<>><<<><>>>><<>><<>>><><<>><<<>>>><><<>>>><<<>><<<<>>><><>>><<<><<>>><<<<>><<<>><>><<<>>><<<<>><<<<><<<<>>><<<<>>>><><<<<>><<<<>><<<><<>><<><<<>><<<>><<>>>><>><>><<>>><<><<>>>><>>><<><<<><<>><<>><<><>>>><<>>><<><<<>>>><<<<><<>>>><<><<><<<>>><<><<<>><<<<>><<<<><<>><<<>>><<>>><<<<>>><<>><<<>>>><<<<>>>><>>>><<<<>><<>><<<<>>><<><<<>>>><<<>><<<<>><<<>>>><>><<>>>><<<<>>><<<<>>>><>>>><<<<>><>>>><<<<><<<<>>><<>>><<<<>><<>>>><><<>><<>>><<<>><<<<>><>>><>>>><>>><<<<><>>>><<<>><>>><<<<>><<<>>><<<><<<>>><<<<>>>><<<>>>><>>><<>><<>><<>>><<<<>>>><<<<>>><<<>><<><<<>><>><<<>>>><<<>><<<>><<<>>>><<<><>><<<>>>><<>>>><<>>><<<>>><>>>><<<<><<<<>>>><<>><<<<><<<<>>><<>><<<>><>>><>>>><<<<>>>><<<>><<>>><>>>><<>><<>>><<><<><<>>><<>><<<>>>><<>>>><<<<>>>";
    private final static String testInput = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>";

    record Pos(int x, int y){}

    private final List<String> shapes = List.of("####", ".#.\n###\n.#.", "..#\n..#\n###", "#\n#\n#\n#", "##\n##");
    private final List<Integer> shapeHeight = List.of(1, 3, 3, 4, 2);

    private Set<Pos> generateShape(int p, int delta_x, int delta_y) {
        Set<Pos> shape = new HashSet<>();
        String[] split = shapes.get(p).split("\\n");
        for(int y=0; y<split.length; y++) {
            for(int x=0; x<split[y].length(); x++) {
                if(split[y].charAt(x) == '#') {
                    shape.add(new Pos(x+delta_x, y+delta_y));
                }
            }
        }
        return shape;
    }

    private static Integer getTowerSize(Set<Pos> state) {
        return Math.abs(state.stream().map(p -> p.y).reduce(0, Integer::min));
    }

    private boolean inLimits(int currentShape, int delta_x, int delta_y, Set<Pos> state) {
        Set<Pos> shape = generateShape(currentShape, delta_x, delta_y);
        if(shape.stream().anyMatch(s -> s.x >= 7 || s.x < 0))
            return false;
        if(shape.stream().anyMatch(state::contains))
            return false;
        return true;
    }

    record FingerPrint(List<Integer> fp){}
    record Combo(int rocks, int towerHeight){}

    class State {
        final String wind;
        int loop;
        int count;
        Set<Pos> solid = new HashSet<>();
        int rockCycleLength = 0;
        int towerHeightDif = 0;
        FingerPrint maxCycleFP = null;
        Map<FingerPrint, Combo> cache = new HashMap<>();

        public State(String wind) {
            this.wind = wind;
        }
    }

//    record State(Set<Pos> solid, String wind, int loop, int count){}

    private void runRockSim(final State s, final Function<State, Boolean> endFunction) {

        // add floor
        for(int i=0; i<7; i++)
            s.solid.add(new Pos(i, 0));

        while(!endFunction.apply(s)) {
            int delta_x = 2, delta_y;
            int currentShape = s.loop % shapes.size();

            // get start y pos
            delta_y = -getTowerSize(s.solid);
            delta_y -= shapeHeight.get(currentShape) + 3;

            // Drop rock
            while(true) {

                // Apply wind if possible
                int windPos = s.count % s.wind.length();
                switch (s.wind.charAt(windPos)) {
                    case '>' -> {
                        if(inLimits(currentShape, delta_x+1, delta_y, s.solid))
                            delta_x++;
                    }
                    case '<' -> {
                        if(inLimits(currentShape, delta_x-1, delta_y, s.solid))
                            delta_x--;
                    }
                }
                s.count++;

                // Check if this is resting on something
                if (!inLimits(currentShape, delta_x, delta_y+1, s.solid))
                    break;

                delta_y++;
            }
            s.solid.addAll(generateShape(currentShape, delta_x, delta_y));

            s.loop++;

            FingerPrint fp = createFingerPrint(s.solid);
            int towerSize = getTowerSize(s.solid);
            if(s.cache.containsKey(fp)) {
                Combo lastSeen = s.cache.get(fp);
                if(s.loop - lastSeen.rocks >= s.rockCycleLength) {
                    s.rockCycleLength = s.loop - lastSeen.rocks;
                    s.towerHeightDif = towerSize - lastSeen.towerHeight;
                    s.maxCycleFP = fp;
                }
            }
            s.cache.put(fp, new Combo(s.loop, towerSize));
        }
    }

    @Test
    public void testFallingRocks() {
        State state = new State(testInput);
        runRockSim(state, s -> s.loop == 2022);
        assertEquals(3068, getTowerSize(state.solid));

        state = new State(puzzleInput);
        runRockSim(state, s -> s.loop == 2022);

        assertEquals(3059, getTowerSize(state.solid));
    }

    private static FingerPrint createFingerPrint(Set<Pos> pos) {
        int top = -getTowerSize(pos);
        List<Integer> integerList = new ArrayList<>();
        for(int y=top; y<top+20; y++) {
            int value = 0;
            for(int x=0; x<7; x++) {
                if(pos.contains(new Pos(x, y)))
                    value++;
                value <<= 1;
            }
            integerList.add(value);
        }
        return new FingerPrint(integerList);
    }

    private long getTowerHeight(String input) {
        // Do 10_000 and get the biggest cycle and corresponding delta height
        State state = new State(input);
        runRockSim(state, s -> s.loop == 10_000);
        System.out.println(state);

        // Move onto the start of the next re-occurrence of fingerprint
        final FingerPrint maxCycleFP = state.maxCycleFP;
        final int rockCycleLength = state.rockCycleLength;
        final int towerHeightDif = state.towerHeightDif;

        runRockSim(state, (s) -> createFingerPrint(s.solid).equals(maxCycleFP));
        System.out.println(state);

        long remainder = 1_000_000_000_000L % (long)rockCycleLength;

        final int lastLoop = state.loop;

        // Need to do rem more loops after a completed cycle
        int towerHeight = getTowerSize(state.solid);
        runRockSim(state, s -> s.loop == lastLoop+remainder);
        int diff = getTowerSize(state.solid) - towerHeight;

        long div = 1_000_000_000_000L / (long)rockCycleLength;
        long height = div * (long)towerHeightDif;

        System.out.println("Remainder "+remainder);
        System.out.println("Diff in height "+diff);
        System.out.println("Height "+height);
        System.out.println("Total "+(height+diff));

        return height+diff;
    }

    @Test
    public void testFallingRocks2() {
        assertEquals(1514285714288L, getTowerHeight(testInput));
    }

    @Test
    public void testFallingRocks3() {
        // rockCycleLength=1759, towerHeightDif=2683
        // rockCycleLength=1825, towerHeightDif=2753
        // rockCycleLength=1720, towerHeightDif=2609
        // rockCycleLength=1715, towerHeightDif=2574  20
        long height = getTowerHeight(puzzleInput);
        assertNotEquals(1516860465125L, height);
        assertNotEquals(1508493149365L, height);
        assertNotEquals(1508493150707L, height);
        assertNotEquals(1525298465039L, height);
        assertNotEquals(1500874635565L, height);
        assertNotEquals(1500874636034L, height);

        assertEquals(0, height);

    }
}
